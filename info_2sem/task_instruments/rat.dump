
rat:     формат файла elf32-i386


Дизассемблирование раздела .init:

080482d4 <_init>:
 80482d4:	53                   	push   %ebx
 80482d5:	83 ec 08             	sub    $0x8,%esp
 80482d8:	e8 a7 00 00 00       	call   8048384 <__x86.get_pc_thunk.bx>
 80482dd:	81 c3 03 14 00 00    	add    $0x1403,%ebx
 80482e3:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482e9:	85 c0                	test   %eax,%eax
 80482eb:	74 05                	je     80482f2 <_init+0x1e>
 80482ed:	e8 3e 00 00 00       	call   8048330 <__gmon_start__@plt>
 80482f2:	83 c4 08             	add    $0x8,%esp
 80482f5:	5b                   	pop    %ebx
 80482f6:	c3                   	ret    

Дизассемблирование раздела .plt:

08048300 <printf@plt-0x10>:
 8048300:	ff 35 e4 96 04 08    	pushl  0x80496e4
 8048306:	ff 25 e8 96 04 08    	jmp    *0x80496e8
 804830c:	00 00                	add    %al,(%eax)
	...

08048310 <printf@plt>:
 8048310:	ff 25 ec 96 04 08    	jmp    *0x80496ec
 8048316:	68 00 00 00 00       	push   $0x0
 804831b:	e9 e0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048320 <scanf@plt>:
 8048320:	ff 25 f0 96 04 08    	jmp    *0x80496f0
 8048326:	68 08 00 00 00       	push   $0x8
 804832b:	e9 d0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048330 <__gmon_start__@plt>:
 8048330:	ff 25 f4 96 04 08    	jmp    *0x80496f4
 8048336:	68 10 00 00 00       	push   $0x10
 804833b:	e9 c0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048340 <exit@plt>:
 8048340:	ff 25 f8 96 04 08    	jmp    *0x80496f8
 8048346:	68 18 00 00 00       	push   $0x18
 804834b:	e9 b0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048350 <__libc_start_main@plt>:
 8048350:	ff 25 fc 96 04 08    	jmp    *0x80496fc
 8048356:	68 20 00 00 00       	push   $0x20
 804835b:	e9 a0 ff ff ff       	jmp    8048300 <_init+0x2c>

Дизассемблирование раздела .text:

08048360 <_start>:
 8048360:	31 ed                	xor    %ebp,%ebp
 8048362:	5e                   	pop    %esi
 8048363:	89 e1                	mov    %esp,%ecx
 8048365:	83 e4 f0             	and    $0xfffffff0,%esp
 8048368:	50                   	push   %eax
 8048369:	54                   	push   %esp
 804836a:	52                   	push   %edx
 804836b:	68 10 85 04 08       	push   $0x8048510
 8048370:	68 a0 84 04 08       	push   $0x80484a0
 8048375:	51                   	push   %ecx
 8048376:	56                   	push   %esi
 8048377:	68 50 84 04 08       	push   $0x8048450
 804837c:	e8 cf ff ff ff       	call   8048350 <__libc_start_main@plt>
 8048381:	f4                   	hlt    
 8048382:	66 90                	xchg   %ax,%ax

08048384 <__x86.get_pc_thunk.bx>:
 8048384:	8b 1c 24             	mov    (%esp),%ebx
 8048387:	c3                   	ret    
 8048388:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
 804838f:	00 

08048390 <deregister_tm_clones>:
 8048390:	b8 2b 97 04 08       	mov    $0x804972b,%eax
 8048395:	2d 28 97 04 08       	sub    $0x8049728,%eax
 804839a:	83 f8 06             	cmp    $0x6,%eax
 804839d:	77 02                	ja     80483a1 <deregister_tm_clones+0x11>
 804839f:	f3 c3                	repz ret 
 80483a1:	b8 00 00 00 00       	mov    $0x0,%eax
 80483a6:	85 c0                	test   %eax,%eax
 80483a8:	74 f5                	je     804839f <deregister_tm_clones+0xf>
 80483aa:	55                   	push   %ebp
 80483ab:	89 e5                	mov    %esp,%ebp
 80483ad:	83 ec 18             	sub    $0x18,%esp
 80483b0:	c7 04 24 28 97 04 08 	movl   $0x8049728,(%esp)
 80483b7:	ff d0                	call   *%eax
 80483b9:	c9                   	leave  
 80483ba:	c3                   	ret    
 80483bb:	90                   	nop
 80483bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

080483c0 <register_tm_clones>:
 80483c0:	b8 28 97 04 08       	mov    $0x8049728,%eax
 80483c5:	2d 28 97 04 08       	sub    $0x8049728,%eax
 80483ca:	c1 f8 02             	sar    $0x2,%eax
 80483cd:	89 c2                	mov    %eax,%edx
 80483cf:	c1 ea 1f             	shr    $0x1f,%edx
 80483d2:	01 d0                	add    %edx,%eax
 80483d4:	d1 f8                	sar    %eax
 80483d6:	75 02                	jne    80483da <register_tm_clones+0x1a>
 80483d8:	f3 c3                	repz ret 
 80483da:	ba 00 00 00 00       	mov    $0x0,%edx
 80483df:	85 d2                	test   %edx,%edx
 80483e1:	74 f5                	je     80483d8 <register_tm_clones+0x18>
 80483e3:	55                   	push   %ebp
 80483e4:	89 e5                	mov    %esp,%ebp
 80483e6:	83 ec 18             	sub    $0x18,%esp
 80483e9:	89 44 24 04          	mov    %eax,0x4(%esp)
 80483ed:	c7 04 24 28 97 04 08 	movl   $0x8049728,(%esp)
 80483f4:	ff d2                	call   *%edx
 80483f6:	c9                   	leave  
 80483f7:	c3                   	ret    
 80483f8:	90                   	nop
 80483f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

08048400 <__do_global_dtors_aux>:
 8048400:	80 3d 28 97 04 08 00 	cmpb   $0x0,0x8049728
 8048407:	75 13                	jne    804841c <__do_global_dtors_aux+0x1c>
 8048409:	55                   	push   %ebp
 804840a:	89 e5                	mov    %esp,%ebp
 804840c:	83 ec 08             	sub    $0x8,%esp
 804840f:	e8 7c ff ff ff       	call   8048390 <deregister_tm_clones>
 8048414:	c6 05 28 97 04 08 01 	movb   $0x1,0x8049728
 804841b:	c9                   	leave  
 804841c:	f3 c3                	repz ret 
 804841e:	66 90                	xchg   %ax,%ax

08048420 <frame_dummy>:
 8048420:	a1 f0 95 04 08       	mov    0x80495f0,%eax
 8048425:	85 c0                	test   %eax,%eax
 8048427:	74 1e                	je     8048447 <frame_dummy+0x27>
 8048429:	b8 00 00 00 00       	mov    $0x0,%eax
 804842e:	85 c0                	test   %eax,%eax
 8048430:	74 15                	je     8048447 <frame_dummy+0x27>
 8048432:	55                   	push   %ebp
 8048433:	89 e5                	mov    %esp,%ebp
 8048435:	83 ec 18             	sub    $0x18,%esp
 8048438:	c7 04 24 f0 95 04 08 	movl   $0x80495f0,(%esp)
 804843f:	ff d0                	call   *%eax
 8048441:	c9                   	leave  
 8048442:	e9 79 ff ff ff       	jmp    80483c0 <register_tm_clones>
 8048447:	e9 74 ff ff ff       	jmp    80483c0 <register_tm_clones>
 804844c:	0f 1f 40 00          	nopl   0x0(%eax)

08048450 <main>:
 8048450:	68 2c 97 04 08       	push   $0x804972c
 8048455:	68 04 97 04 08       	push   $0x8049704
 804845a:	e8 c1 fe ff ff       	call   8048320 <scanf@plt>
 804845f:	a1 2c 97 04 08       	mov    0x804972c,%eax
 8048464:	8b 1d 0b 97 04 08    	mov    0x804970b,%ebx

0804846a <euqlid>:
 804846a:	31 d2                	xor    %edx,%edx
 804846c:	f7 f3                	div    %ebx
 804846e:	89 d8                	mov    %ebx,%eax
 8048470:	89 d3                	mov    %edx,%ebx
 8048472:	81 fb 00 00 00 00    	cmp    $0x0,%ebx
 8048478:	75 f0                	jne    804846a <euqlid>
 804847a:	3b 05 0f 97 04 08    	cmp    0x804970f,%eax
 8048480:	7d 0a                	jge    804848c <ok>
 8048482:	68 1d 97 04 08       	push   $0x804971d
 8048487:	e9 05 00 00 00       	jmp    8048491 <prn>

0804848c <ok>:
 804848c:	68 13 97 04 08       	push   $0x8049713

08048491 <prn>:
 8048491:	e8 7a fe ff ff       	call   8048310 <printf@plt>
 8048496:	68 00 00 00 00       	push   $0x0
 804849b:	e8 a0 fe ff ff       	call   8048340 <exit@plt>

080484a0 <__libc_csu_init>:
 80484a0:	55                   	push   %ebp
 80484a1:	57                   	push   %edi
 80484a2:	31 ff                	xor    %edi,%edi
 80484a4:	56                   	push   %esi
 80484a5:	53                   	push   %ebx
 80484a6:	e8 d9 fe ff ff       	call   8048384 <__x86.get_pc_thunk.bx>
 80484ab:	81 c3 35 12 00 00    	add    $0x1235,%ebx
 80484b1:	83 ec 1c             	sub    $0x1c,%esp
 80484b4:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 80484b8:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 80484be:	e8 11 fe ff ff       	call   80482d4 <_init>
 80484c3:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 80484c9:	29 c6                	sub    %eax,%esi
 80484cb:	c1 fe 02             	sar    $0x2,%esi
 80484ce:	85 f6                	test   %esi,%esi
 80484d0:	74 27                	je     80484f9 <__libc_csu_init+0x59>
 80484d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80484d8:	8b 44 24 38          	mov    0x38(%esp),%eax
 80484dc:	89 2c 24             	mov    %ebp,(%esp)
 80484df:	89 44 24 08          	mov    %eax,0x8(%esp)
 80484e3:	8b 44 24 34          	mov    0x34(%esp),%eax
 80484e7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484eb:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 80484f2:	83 c7 01             	add    $0x1,%edi
 80484f5:	39 f7                	cmp    %esi,%edi
 80484f7:	75 df                	jne    80484d8 <__libc_csu_init+0x38>
 80484f9:	83 c4 1c             	add    $0x1c,%esp
 80484fc:	5b                   	pop    %ebx
 80484fd:	5e                   	pop    %esi
 80484fe:	5f                   	pop    %edi
 80484ff:	5d                   	pop    %ebp
 8048500:	c3                   	ret    
 8048501:	eb 0d                	jmp    8048510 <__libc_csu_fini>
 8048503:	90                   	nop
 8048504:	90                   	nop
 8048505:	90                   	nop
 8048506:	90                   	nop
 8048507:	90                   	nop
 8048508:	90                   	nop
 8048509:	90                   	nop
 804850a:	90                   	nop
 804850b:	90                   	nop
 804850c:	90                   	nop
 804850d:	90                   	nop
 804850e:	90                   	nop
 804850f:	90                   	nop

08048510 <__libc_csu_fini>:
 8048510:	f3 c3                	repz ret 
 8048512:	66 90                	xchg   %ax,%ax

Дизассемблирование раздела .fini:

08048514 <_fini>:
 8048514:	53                   	push   %ebx
 8048515:	83 ec 08             	sub    $0x8,%esp
 8048518:	e8 67 fe ff ff       	call   8048384 <__x86.get_pc_thunk.bx>
 804851d:	81 c3 c3 11 00 00    	add    $0x11c3,%ebx
 8048523:	83 c4 08             	add    $0x8,%esp
 8048526:	5b                   	pop    %ebx
 8048527:	c3                   	ret    
